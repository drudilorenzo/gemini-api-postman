{
	"info": {
		"_postman_id": "c950eb78-854e-4a2e-94db-fe89ce355d9d",
		"name": "Code Execution",
		"description": "## üßÆ Code Execution with the Gemini API\n\nThe **Gemini API** includes a **code execution tool** that allows the model to generate and execute **Python code**. This enables iterative reasoning: the model can run code, analyze the result, refine its logic, and repeat this process until it produces a final answer.\n\nThis capability is especially useful for building applications that require **code-based problem solving**.\n\nüîó **Official Documentation**: [Code Execution API](https://ai.google.dev/gemini-api/docs/code-execution) \n  \n\n### ‚úÖ Use Cases\n\nYou can use code execution for a variety of tasks, such as:\n\n- Solving math or logic problems programmatically\n    \n- Performing text or data transformations\n    \n- Visualizing results with built-in libraries\n    \n- Running scientific or statistical computations using supported Python packages\n    \n\n> Note: The code execution environment includes commonly used libraries, enabling more advanced or domain-specific tasks. \n  \n\n---\n\n### ‚ö†Ô∏è Language Support\n\n- ‚úÖ **Supported**: Python\n    \n- ‚ùå **Not Supported**: Other languages (e.g., JavaScript, C++, Java) cannot be executed\n    \n\nYou can still prompt Gemini to **generate code** in other programming languages, but it won‚Äôt be able to **run** that code using the execution tool.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "45478362-c950eb78-854e-4a2e-94db-fe89ce355d9d"
	},
	"item": [
		{
			"name": "Code Generation & Execution in Text Generation Example",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "70f283c2-bb12-4585-9e93-62455934c12f",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1e54effe-3423-44ed-99c9-ef16fb5f94c2",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8b5303ed-6020-48ee-9b7c-054239e7255e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contents\": {\n        \"parts\": [\n            {\n                        \"text\": \"What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50\"\n                    }\n                ]\n            },\n            \"tools\": [{\"code_execution\": {}}],\n            \"generation_config\": { //optional\n                \"max_output_tokens\": 1000,\n                \"temperature\": 1\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/models/{{model}}:generateContent",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"models",
						"{{model}}:generateContent"
					]
				},
				"description": "Generate and Run Python code."
			},
			"response": [
				{
					"id": "d54b8733-ea42-409b-901d-5e47289f586c",
					"name": "Code Generation & Execution in Text Generation",
					"originalRequest": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{vault:geminiApi}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contents\": {\n        \"parts\": [\n            {\n                        \"text\": \"What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50\"\n                    }\n                ]\n            },\n            \"tools\": [{\"code_execution\": {}}],\n            \"generation_config\": { //optional\n                \"max_output_tokens\": 1000,\n                \"temperature\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{apiVersion}}/models/{{model}}:generateContent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"models",
								"{{model}}:generateContent"
							]
						},
						"description": "Generate and Run Python code."
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=UTF-8"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "X-Origin"
						},
						{
							"key": "Vary",
							"value": "Referer"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Date",
							"value": "Thu, 26 Jun 2025 10:40:11 GMT"
						},
						{
							"key": "Server",
							"value": "scaffolding on HTTPServer2"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "SAMEORIGIN"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server-Timing",
							"value": "gfet4t7; dur=8677"
						},
						{
							"key": "Alt-Svc",
							"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"candidates\": [\n        {\n            \"content\": {\n                \"parts\": [\n                    {\n                        \"executableCode\": {\n                            \"language\": \"PYTHON\",\n                            \"code\": \"def is_prime(n):\\n    if n < 2:\\n        return False\\n    for i in range(2, int(n**0.5) + 1):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\nprimes = []\\nnum = 2\\nwhile len(primes) < 50:\\n    if is_prime(num):\\n        primes.append(num)\\n    num += 1\\n\\nsum_of_primes = sum(primes)\\nprint(f\\\"The first 50 prime numbers are: {primes}\\\")\\nprint(f\\\"The sum of the first 50 prime numbers is: {sum_of_primes}\\\")\\n\"\n                        }\n                    },\n                    {\n                        \"codeExecutionResult\": {\n                            \"outcome\": \"OUTCOME_OK\",\n                            \"output\": \"The first 50 prime numbers are: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]\\nThe sum of the first 50 prime numbers is: 5117\\n\"\n                        }\n                    },\n                    {\n                        \"text\": \"The sum of the first 50 prime numbers is 5117.\"\n                    }\n                ],\n                \"role\": \"model\"\n            },\n            \"finishReason\": \"STOP\",\n            \"index\": 0\n        }\n    ],\n    \"usageMetadata\": {\n        \"promptTokenCount\": 30,\n        \"candidatesTokenCount\": 170,\n        \"totalTokenCount\": 1291,\n        \"promptTokensDetails\": [\n            {\n                \"modality\": \"TEXT\",\n                \"tokenCount\": 30\n            }\n        ],\n        \"toolUsePromptTokenCount\": 761,\n        \"toolUsePromptTokensDetails\": [\n            {\n                \"modality\": \"TEXT\",\n                \"tokenCount\": 761\n            }\n        ],\n        \"thoughtsTokenCount\": 330\n    },\n    \"modelVersion\": \"gemini-2.5-flash-lite-preview-06-17\",\n    \"responseId\": \"iyNdaKeJJLrnnsEP58TCuAI\"\n}"
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{vault:geminiKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "key",
				"type": "string"
			},
			{
				"key": "in",
				"value": "query",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8c8baa4d-e552-482d-b9a7-1665e3e1392f",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7588e5df-6969-4b10-b2e2-419980336496",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test(\"Response Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"});",
					"",
					"pm.test(\"Check existence of executableCode and codeExecutionResult in candidate parts\", function () {",
					"    const responseData = pm.response.json();",
					"",
					"    pm.expect(responseData.candidates).to.be.an(\"array\").that.is.not.empty;",
					"",
					"    const parts = responseData.candidates[0].content.parts;",
					"    pm.expect(parts).to.be.an(\"array\");",
					"",
					"    let foundExecutableCode = false;",
					"    let foundCodeExecutionResult = false;",
					"",
					"    parts.forEach(function(part) {",
					"        if (part.hasOwnProperty(\"executableCode\")) {",
					"            foundExecutableCode = true;",
					"            pm.expect(part.executableCode).to.be.an(\"object\");",
					"            pm.expect(part.executableCode).to.have.property(\"language\").that.is.a(\"string\");",
					"            pm.expect(part.executableCode).to.have.property(\"code\").that.is.a(\"string\");",
					"        }",
					"",
					"        if (part.hasOwnProperty(\"codeExecutionResult\")) {",
					"            foundCodeExecutionResult = true;",
					"            pm.expect(part.codeExecutionResult).to.be.an(\"object\");",
					"            pm.expect(part.codeExecutionResult).to.have.property(\"outcome\").that.is.a(\"string\");",
					"            pm.expect(part.codeExecutionResult).to.have.property(\"output\").that.is.a(\"string\");",
					"        }",
					"    });",
					"",
					"    pm.expect(foundExecutableCode, \"executableCode not found in any part\").to.be.true;",
					"    pm.expect(foundCodeExecutionResult, \"codeExecutionResult not found in any part\").to.be.true;",
					"});"
				]
			}
		}
	]
}